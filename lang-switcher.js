// Language Switcher Component for SigmaTrade
// Beautiful, animated language selector with flags

function initLanguageSwitcher() {
    const header = document.querySelector('.header-info');
    if (!header) return;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —è–∑—ã–∫–∞
    const langSwitcherHTML = `
        <div class="lang-switcher">
            <button class="lang-switcher-btn" id="langSwitcherBtn" title="–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ / Choose Language">
                <span class="current-lang">
                    <span class="lang-flag">üá∑üá∫</span>
                    <span class="lang-code">RU</span>
                </span>
                <svg class="lang-arrow" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M6 9L12 15L18 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>

            <div class="lang-dropdown" id="langDropdown">
                <div class="lang-dropdown-header">
                    <span class="lang-dropdown-title">üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</span>
                </div>
                <div class="lang-options"></div>
            </div>
        </div>
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –≤—Ö–æ–¥–∞
    const loginBtn = header.querySelector('.login-btn');
    if (loginBtn) {
        loginBtn.insertAdjacentHTML('beforebegin', langSwitcherHTML);
    } else {
        header.insertAdjacentHTML('beforeend', langSwitcherHTML);
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–ø—Ü–∏–∏ —è–∑—ã–∫–æ–≤
    populateLanguageOptions();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    setupLanguageSwitcherEvents();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –≤ –∫–Ω–æ–ø–∫–µ
    updateCurrentLanguageDisplay();
}

function populateLanguageOptions() {
    const langOptionsContainer = document.querySelector('.lang-options');
    if (!langOptionsContainer || !window.i18n) return;

    const languages = window.i18n.getAllLanguages();
    const currentLang = window.i18n.getCurrentLanguage();

    const optionsHTML = Object.entries(languages).map(([code, info]) => `
        <button class="lang-option ${code === currentLang ? 'active' : ''}"
                data-lang="${code}"
                title="${info.name}">
            <span class="lang-option-flag">${info.flag}</span>
            <span class="lang-option-info">
                <span class="lang-option-native">${info.nativeName}</span>
                <span class="lang-option-name">${info.name}</span>
            </span>
            <span class="lang-option-check">‚úì</span>
        </button>
    `).join('');

    langOptionsContainer.innerHTML = optionsHTML;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–∞–∂–¥—É—é –æ–ø—Ü–∏—é
    langOptionsContainer.querySelectorAll('.lang-option').forEach(option => {
        option.addEventListener('click', async (e) => {
            const lang = e.currentTarget.getAttribute('data-lang');
            await changeLanguage(lang);
        });
    });
}

function setupLanguageSwitcherEvents() {
    const btn = document.getElementById('langSwitcherBtn');
    const dropdown = document.getElementById('langDropdown');

    if (!btn || !dropdown) return;

    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ dropdown
    btn.addEventListener('click', (e) => {
        e.stopPropagation();
        dropdown.classList.toggle('active');
        btn.classList.toggle('active');
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ dropdown
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.lang-switcher')) {
            dropdown.classList.remove('active');
            btn.classList.remove('active');
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            dropdown.classList.remove('active');
            btn.classList.remove('active');
        }
    });
}

async function changeLanguage(langCode) {
    if (!window.i18n) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const btn = document.getElementById('langSwitcherBtn');
    if (btn) {
        btn.classList.add('loading');
    }

    try {
        // –ú–µ–Ω—è–µ–º —è–∑—ã–∫
        const success = await window.i18n.changeLanguage(langCode);

        if (success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            updateCurrentLanguageDisplay();

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º dropdown
            const dropdown = document.getElementById('langDropdown');
            if (dropdown) {
                dropdown.classList.remove('active');
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (window.showToast) {
                const langInfo = window.i18n.getLanguageInfo(langCode);
                showToast(`üåç ${langInfo.nativeName}`, 'success');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π
            populateLanguageOptions();
        }
    } catch (error) {
        console.error('Error changing language:', error);
        if (window.showToast) {
            showToast('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ / Language change error', 'error');
        }
    } finally {
        if (btn) {
            btn.classList.remove('loading');
        }
    }
}

function updateCurrentLanguageDisplay() {
    if (!window.i18n) return;

    const currentLang = window.i18n.getCurrentLanguage();
    const langInfo = window.i18n.getLanguageInfo(currentLang);

    const currentLangElement = document.querySelector('.current-lang');
    if (currentLangElement && langInfo) {
        currentLangElement.innerHTML = `
            <span class="lang-flag">${langInfo.flag}</span>
            <span class="lang-code">${currentLang.toUpperCase()}</span>
        `;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º title –∫–Ω–æ–ø–∫–∏
    const btn = document.getElementById('langSwitcherBtn');
    if (btn && langInfo) {
        btn.title = `${langInfo.nativeName} / ${langInfo.name}`;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initLanguageSwitcher);
} else {
    initLanguageSwitcher();
}

// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
window.addEventListener('languageChanged', (e) => {
    console.log('Language changed to:', e.detail.language);

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if (window.app) {
        // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        // app.updateDynamicContent();
    }
});
